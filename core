#!/bin/sh

_copyright(){ echo "
  ozh lightweight shell extensions
  2008-2014 - anx @ ulzq de (Sebastian Glaser)
  Licensed under GNU GPL v3"; }
_license(){ echo "
  ozh is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2, or (at your option)
  any later version.

  ozh is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this software; see the file COPYING.  If not, write to
  the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
  Boston, MA 02111-1307 USA

  http://www.gnu.org/licenses/gpl.html"; }

# taken from andcrs and andlib
test -z "$TERM" || { E="\x1b["; R=$E"0m"; CL=$E"0E"$E"0J"; RN=$E"0m\n"; bold=$E"1m"; black=$E"30m"; red=$E"31m"; green=$E"32m"; yellow=$E"33m"; blue=$E"34m"; magenta=$E"35m"; cyan=$E"37m"; white=$E"38m"; bblack=$E"40m";bred=$E"41m";bgreen=$E"42m";byellow=$E"43m";bblue=$E"44m";bmagenta=$E"45m";bcyan=$E"47m";bwhite=$E"48m";}
is_set(){ type "$1" >/dev/null 2>&1; }; _done(){ printf "$R\x1b[9999G\x1b[4D $bgreen$black ok $RN" >&2; }; _fail(){ printf "$R\x1b[9999G\x1b[6D $bred fail $RN" >&2; }
_task(){ local h="$1"; shift; printf "$byellow$black$bold $h $R $*" >&2; }
_branch(){ printf "$R\x1b[9999G\x1b[$(( $(printf "$1"|wc -c) + 2))D $byellow$black $1 $RN" >&2; }
echo | busybox pipe_progress >/dev/null 2>&1 && { pipe_progress(){ printf "$bgreen $R" >&2; cat - | busybox pipe_progress; }; } || { pipe_progress(){ awk '{print $0;c+=length($0);if(l<c%1024){l=c;printf "'"$bgreen $R"'"|"cat >&2"}}'; }; }
homeof(){ local dir=; which getent >/dev/null 2>&1 && dir=$(getent passwd "$1" 2>/dev/null | cut -d: -f6); [ -z "$dir" -a "$1" = "root" -a -d /root ] && dir="/root"; [ -z "$dir" -a -d "/home/$1" ] && dir="/home/$1"; echo $dir; }
match(){ echo "@$1" | grep -q "$2"; }
app_exists(){ which "$1" >/dev/null 2>&1; }

# wrap around busybox commands
[ -z "$OZH" ] && eval "$(
  busybox 2>&1 |
  busybox awk '
    BEGIN{ RS=",";blacklist["[["]=1;blacklist["ls"]=1;blacklist["time"]=1}
    {gsub(/[\t \n]/,"",$0)}
    /\[\[/{p=1}
    (p&&!blacklist[$1]==1&&$0!=""){
      printf "alias %s=\"busybox %s\";",$0,$0}')"

_sanitize_path(){
  local new=""; local paths="./bin\n$HOME/bin\n$OZH/bin\n/usr/local/bin\n/usr/local/sbin\n/usr/local/libexec\n/opt/bin\n/opt/sbin\n/opt/libexec\n/usr/bin\n/usr/sbin\n/usr/libexec\n/sbin\n/bin\n/libexec\n/system/bin\n/system/sbin\n/system/xbin\n$(echo $PATH|tr : '\n')"
  for p in $(printf "$paths");do test -d "$p" && { match "$new" "^@$p\$" || { new="$new\n$p"; }; }; done
  export PATH=$(printf "$new" | tr '\n' : | sed 's/^.//;q'); }

_install(){
  local repo; local url; local dir; local file; local dirfile; local banner
  local lib=false; local only=false; local prefix=false; local PREFIX; local mod="core"
  local stack="$stack$bred $R"
  _save_to(){ ( pipe_progress > "$1" ) 2>&1 | tr -d '\n' | tr . ' '; }
  _retrieve(){
    match "$1" "@http" && { curl "$1" 2>/dev/null | _save_to "$2"; printf $(du $2|awk '{print $1}'); return $?; }
    { cat "$1" | _save_to "$2"; return $?; }; }
  while [ -n "$1" ] && { mod="$1"; shift; }; do
    match "$mod" "@.prefix" && { prefix=$( echo $mod|sed 's/-.*/false/;s/\+.*/true/'); $prefix && PREFIX=$1; shift; continue; }
    match "$mod" "@.lib"    && { lib=$( echo $mod|sed 's/-.*/false/;s/\+.*/true/'); continue; }
    match "$mod" "@.only"   && { only=$(echo $mod|sed 's/-.*/false/;s/\+.*/true/'); continue; }
    file=$(basename $mod); $prefix && mod="$PREFIX/$mod"
    match "$mod" "http" \
      && {
        url="$mod"; dir=$(basename $mod)
        mkdir -p "$OZH/$dir"                                 # create module dir
        echo "$mod" | sed 's/\/[^\/]*$//' > "$OZH/$dir/repo" # add repo entry
    } || { # filesystem handler
      match "$mod" "/" || mod="$mod/$mod"
      dir=$(basename $(dirname $mod))
      [ -f "$OZH/$dir/repo" ] \
        && { url="$(cat "$OZH/$dir/repo")/$file"; } \
        || { [ -d "$(dirname $mod)" -a -f "$mod" ] \
          && {
            url="$mod";
            mkdir -p "$OZH/$dir"              # create module dir
            dirname "$mod" > "$OZH/$dir/repo" # add repo entry
            cat "$OZH/$dir/repo"
           } \
          || { printf "not a mod, not in repo: $dir $file $mod"; _fail; continue; }; }; }
    dirfile="$dir/$file"
    # cache and print banner
    banner="$(printf "${bred}i$($lib && printf l || printf ' '; $only && printf o || printf ' ')$R $stack $byellow$black $file $R \x1b[100D\x1b[30C$bgreen$white$bold")"; printf "$banner "
    # fetch the module
    _retrieve "$url" "$OZH/$dirfile" || { _fail; continue; }
    # if the lib flag is raised, add module to $OZH/libs
    $lib && { printf "${byellow}l"; grep -q "^$dirfile\$" "$OZH/libs" 2>/dev/null || echo "$dirfile" >> "$OZH/libs"; }
    # unless the only flag is raised, source the module, execute hooks
    $only && printf o || {
      printf "$bgreen(%s)s" $(cat "$OZH/$dirfile" | wc -c); local OZH_INSTALL="$dirfile"; local  OZH_REQUIRE="$dirfile"; . "$OZH/$dirfile"
        is_set "_install_$file" && { printf h; _branch "deps"; _install_$file; printf "$banner"; }; }
    _done
  done; return 0; }

_require(){
  local mod="$1"; match "@$mod" "/" || mod="$mod/$mod"; mod="$OZH/$mod"
  local OZH_REQUIRE="$mod"; [ -f "$mod" ] && . "$mod"; }

[ -n "$OZH_INSTALL" ] && { _install_core(){
  which curl >/dev/null 2>&1 ||
    if [ -d "/system" ];then # arm-android
      local o="/system/xbin"; [ -d "$o" ] || o=; o="/system/bin"; [ -d "$o" ] || o=
      [ -z "$o" ] || { mount -o remount,rw /system;
      # wget -O "/system/xbin/curl" "http://curl.haxx.se/gknw.net/7.34.0/dist-android/curl-7.34.0-rtmp-ssh2-ssl-zlib-static-bin-android.tar.gz";
    }
    fi
  oz install +lib core/andcrs core/andlib; };  }

_lib(){
  local libpath="$OZH/libs"; local cmd="_lib_$1"; shift;
  _lib_boot(){
    _boot_widget(){ printf "$bold$bgreen$white$1 $R"; }
    _boot_widget_red(){ printf "$bred$(basename $1) $R"; }
    _boot_cat(){ eval "$(
      printf "_boot_widget_red %s\n" $@; echo 'printf "\x1b[100D"; '
      printf "%s\n" $@ | awk '{ s=$0; sub(".*\/","",s)
        printf "\n%s\n_boot_widget %s\n_%s(){\n",p,s,s; p=sprintf("\n}; _%s || echo %s;\n",s,s)
        while((getline line < $0 > 0 )){print line}}END{printf p}';)"; }
    _boot_cat $(printf "$OZH/%s\n" $(cat "$OZH/libs";); ); echo; }
  _lib_add(){  grep -q  "^$1\$" "$libpath" 2>/dev/null || echo "$1" >> "$libpath"; }
  _lib_del(){  echo "$(grep -v "^$1\$" "$libpath")" > "$libpath"; }
  _lib_path(){ echo "$libpath"; }
  _lib_edit(){ _edit "libs"; }
  _lib_get(){  _get "libs"; }
  is_set "$cmd" && "$cmd" $@; }

_hook(){
  local lib="$OZH/hook" cmd="_hook_$1"; shift;
  local hook="$1" name="$2" cache="$lib/$1/.cache" dir="$lib/$1" file="$lib/$1/$2"; shift;
  _hook_run(){ [ ! -f "$cache" ] && { mkdir -p "$dir"; cat "$dir/"* > "$cache"; }; . "$cache" $@; }
  _hook_get(){  shift; cat "$file"; }
  _hook_set(){  shift; mkdir -p "$dir"; rm "$cache" 2>/dev/null; echo "$@" > "$file"; }
  _hook_del(){  shift; mkdir -p "$dir"; rm "$cache" 2>/dev/null; rm "$file" 2>/dev/null; }
  _hook_list(){ shift; ls "$dir"; }
  _hook_edit(){ shift; mkdir -p "$dir"; rm "$cache" 2>/dev/null; oz edit "$file"; }
  is_set "$cmd" && "$cmd" $@; }

_env(){
  export OZH USER=$(whoami) HOME=$(homeof $USER) HOST=$(hostname 2>/dev/null)
  local p= d="$HOME/.config\n/data/local\n$HOME\n/etc"
  while [ -z "$OZH" -a -n "$d" ]; do p=$(printf "$d"|sed q); d=$(printf "$d"|sed 1d); [ -d "$p" ] && OZH="$p/ozh"; done
  [ -n "$OZH" -a ! -f $OZH -a -d "$OZH" ] || mkdir -p "$OZH"
  _sanitize_path; }

_printenv() { for k in OZH USER HOME PATH;do
  printf "$bblack $k $R\x1b[100D\x1b[10C$bblue %s $R\n" $(eval echo -n \$$k); done
  printf "$bblack LIBS $R\x1b[100D\x1b[9C$(cat $OZH/libs 2>/dev/null|sort|awk '
    BEGIN{FS="/"}{ if(p!=$1){p=$1;printf " ["p"] ";s=""};if($2!=p){printf s$2;s=","}}')\n"; }

_reload(){ . $OZH/core/core libs; }
_update(){ oz install +only core; oz reload; }
_set(){ local k=$1;shift; [ -d "$OZH" ] && { echo $@ > "$OZH/$k"; }; }
_get(){ local k=$1;shift; [ -d "$OZH" -a -f "$OZH/$k" ] && cat "$OZH/$k"; }
_edit(){ local k=$1;shift; [ -f "$k" ] && { $EDITOR "$k"; return; }; [ -d "$OZH" -a -f "$OZH/$k" ] && $EDITOR "$OZH/$k"; }
_default(){ test -z "$1" || export "$1"="$2"; }

_help(){ opt="$bblack$white"; arg="$bblue"; cmd="$byellow$black"
  printf "$bred"; _copyright; printf "$RN";
  printf "$cmd ozh $R              $opt command $R
  $cmd install        $R $opt -only -lib $arg module $opt more modules $R
  $cmd remove         $R $opt -lib $arg module $opt more modules $R
  $cmd enable/disable $R $arg module $R
  $cmd get/edit       $R $arg key $R
  $cmd set            $R $arg key $opt val $R
  $cmd env/printenv   $RN"; }

ozh(){ test -z "$1" || {
  test -d "$OZH" 2>/dev/null || _env
  [ -f "$OZH/libs" ] && { _lib boot; }
  local CMD=$1; shift;
  type "_$CMD" >/dev/null 2>&1 && "_$CMD" $@ || {
  type "$CMD"  >/dev/null 2>&1 && "$CMD"  $@; }
  return $?; }; }

oz(){ local CMD=$1; shift; type "_$CMD" >/dev/null 2>&1 && "_$CMD" $@; }

[ -z "$OZH_REQUIRE" ] && ozh $@

